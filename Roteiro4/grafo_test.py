
import unittest
from grafo_adj_nao_dir import Grafo

class TestGrafo(unittest.TestCase):

    def setUp(self):
        # Grafo da Paraíba
        self.g_p = Grafo(['J', 'C', 'E', 'P', 'M', 'T', 'Z'])
        #{'a1':'J-C', 'a2':'C-E', 'a3':'C-E', 'a4':'C-P', 'a5':'C-P', 'a6':'C-M', 'a7':'C-T', 'a8':'M-T', 'a9':'T-Z'}
        self.g_p.adicionaAresta('J-C')
        self.g_p.adicionaAresta('C-E')
        self.g_p.adicionaAresta('C-E')
        self.g_p.adicionaAresta('C-P')
        self.g_p.adicionaAresta('C-P')
        self.g_p.adicionaAresta('C-M')
        self.g_p.adicionaAresta('C-T')
        self.g_p.adicionaAresta('M-T')
        self.g_p.adicionaAresta('T-Z')


        # Grafo da Paraíba sem arestas paralelas
        self.g_p_sem_paralelas = Grafo(['J', 'C', 'E', 'P', 'M', 'T', 'Z'])
        self.g_p_sem_paralelas.adicionaAresta('J-C')
        self.g_p_sem_paralelas.adicionaAresta('C-E')
        self.g_p_sem_paralelas.adicionaAresta('C-P')
        self.g_p_sem_paralelas.adicionaAresta('C-M')
        self.g_p_sem_paralelas.adicionaAresta('C-T')
        self.g_p_sem_paralelas.adicionaAresta('M-T')
        self.g_p_sem_paralelas.adicionaAresta('T-Z')

        # Grafos completos
        #self.g_c = Grafo(['J', 'C', 'E', 'P'], {'a1':'J-C', 'a3':'J-E', 'a4':'J-P', 'a6':'C-E', 'a7':'C-P', 'a8':'E-P'})
        self.g_c = Grafo(['J', 'C', 'E', 'P'])
        self.g_c.adicionaAresta('J-C')
        self.g_c.adicionaAresta('J-E')
        self.g_c.adicionaAresta('J-P')
        self.g_c.adicionaAresta('C-E')
        self.g_c.adicionaAresta('C-P')
        self.g_c.adicionaAresta('E-P')

        self.g_c3 = Grafo(['J'])

        # Grafos com laco
        #self.g_l1 = Grafo(['A', 'B', 'C', 'D'], {'a1':'A-A', 'a2':'B-A', 'a3':'A-A'})
        self.g_l1 = Grafo(['A', 'B', 'C', 'D'])
        self.g_l1.adicionaAresta('A-A')
        self.g_l1.adicionaAresta('A-A')
        self.g_l1.adicionaAresta('B-A')

        #self.g_l2 = Grafo(['A', 'B', 'C', 'D'], {'a1':'A-B', 'a2':'B-B', 'a3':'B-A'})
        self.g_l2 = Grafo(['A', 'B', 'C', 'D'])
        self.g_l2.adicionaAresta('A-B')
        self.g_l2.adicionaAresta('B-B')
        self.g_l2.adicionaAresta('B-A')

        #self.g_l3 = Grafo(['A', 'B', 'C', 'D'], {'a1':'C-A', 'a2':'C-C', 'a3':'D-D'})
        self.g_l3 = Grafo(['A', 'B', 'C', 'D'])
        self.g_l3.adicionaAresta('C-A')
        self.g_l3.adicionaAresta('C-C')
        self.g_l3.adicionaAresta('D-D')

        #self.g_l4 = Grafo(['D'], {'a2':'D-D'})
        self.g_l4 = Grafo(['D'])
        self.g_l4.adicionaAresta('D-D')

        #self.g_l5 = Grafo(['C', 'D'], {'a2':'D-C', 'a3':'C-C'})
        self.g_l5 = Grafo(['C', 'D'])
        self.g_l5.adicionaAresta('D-C')
        self.g_l5.adicionaAresta('C-C')

        self.g_l6 = Grafo(['D','C', 'A', 'F', 'E', 'H', 'G','B'])
        self.g_l6.adicionaAresta('D-G')
        self.g_l6.adicionaAresta('B-G')
        self.g_l6.adicionaAresta('E-B')
        self.g_l6.adicionaAresta('C-E')
        self.g_l6.adicionaAresta('D-A')
        self.g_l6.adicionaAresta('D-C')
        self.g_l6.adicionaAresta('D-F')
        self.g_l6.adicionaAresta('A-C')
        self.g_l6.adicionaAresta('C-F')
        self.g_l6.adicionaAresta('E-G')
        self.g_l6.adicionaAresta('E-H')
        self.g_l6.adicionaAresta('H-G')

        self.g_l7 = Grafo(['D', 'C', 'A', 'F', 'E', 'H', 'G', 'B'])
        self.g_l7.adicionaAresta('D-G')
        self.g_l7.adicionaAresta('B-G')
        self.g_l7.adicionaAresta('E-B')
        self.g_l7.adicionaAresta('C-E')
        self.g_l7.adicionaAresta('D-A')
        self.g_l7.adicionaAresta('D-C')
        self.g_l7.adicionaAresta('D-F')
        self.g_l7.adicionaAresta('A-C')
        self.g_l7.adicionaAresta('C-F')
        self.g_l7.adicionaAresta('E-G')
        self.g_l7.adicionaAresta('E-H')
        self.g_l7.adicionaAresta('H-G')
        self.g_l7.adicionaAresta('H-A')

        self.g_l8 = Grafo(['A', 'B', 'C'])
        self.g_l8.adicionaAresta('A-B')
        self.g_l8.adicionaAresta('B-C')
        self.g_l8.adicionaAresta('A-C')

        self.g_z = Grafo(['J', 'C', 'E', 'P', 'G', 'A', 'B'])
        self.g_z.adicionaAresta('J-C')
        self.g_z.adicionaAresta('E-C')
        self.g_z.adicionaAresta('E-P')
        self.g_z.adicionaAresta('G-P')
        self.g_z.adicionaAresta('A-B')
        self.g_z.adicionaAresta('A-A')
        self.g_z.adicionaAresta('B-B')

        self.g_z1 = Grafo(['J', 'U', 'V', 'I', 'T', 'O', 'R', 'E', 'P', 'B', 'L', 'C', 'A'])
        self.g_z1.adicionaAresta('J-A')
        self.g_z1.adicionaAresta('U-C')
        self.g_z1.adicionaAresta('L-V')
        self.g_z1.adicionaAresta('I-B')
        self.g_z1.adicionaAresta('P-O')
        self.g_z1.adicionaAresta('R-E')
        self.g_z1.adicionaAresta('J-U')
        self.g_z1.adicionaAresta('E-P')
        self.g_z1.adicionaAresta('A-C')

        self.g_z2 = Grafo(['I', 'F', 'P', 'B', 'E', 'D', 'U'])
        self.g_z2.adicionaAresta('I-F')
        self.g_z2.adicionaAresta('D-U')
        self.g_z2.adicionaAresta('B-E')

        self.g_z3 = Grafo(['I', 'F'])
        self.g_z3.adicionaAresta('I-I')
        self.g_z3.adicionaAresta('F-F')

        self.g_z4 = Grafo(
            ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U',
             'V', 'W', 'X', 'Y', 'Z'])
        self.g_z4.adicionaAresta('A-B')
        self.g_z4.adicionaAresta('B-C')
        self.g_z4.adicionaAresta('C-D')
        self.g_z4.adicionaAresta('D-E')
        self.g_z4.adicionaAresta('F-E')
        self.g_z4.adicionaAresta('G-H')
        self.g_z4.adicionaAresta('I-J')
        self.g_z4.adicionaAresta('J-K')
        self.g_z4.adicionaAresta('K-L')
        self.g_z4.adicionaAresta('L-M')
        self.g_z4.adicionaAresta('N-M')
        self.g_z4.adicionaAresta('P-Q')
        self.g_z4.adicionaAresta('Z-A')
        self.g_z4.adicionaAresta('O-P')
        self.g_z4.adicionaAresta('T-S')

        self.g_z5 = Grafo(['A', 'B', 'C', 'D', 'E', 'F', 'G'])
        self.g_z5.adicionaAresta('A-A')
        self.g_z5.adicionaAresta('B-A')
        self.g_z5.adicionaAresta('B-B')
        self.g_z5.adicionaAresta('A-G')
        self.g_z5.adicionaAresta('F-E')

        self.g_z6 = Grafo(['G', 'R', 'A', 'F', 'O', 'S'])
        self.g_z6.adicionaAresta('G-R')
        self.g_z6.adicionaAresta('R-A')
        self.g_z6.adicionaAresta('A-F')
        self.g_z6.adicionaAresta('F-O')
        self.g_z6.adicionaAresta('O-S')

        self.g_z7 = Grafo(['G'])
        self.g_z7.adicionaAresta('G-G')

        self.g_z8 = Grafo(['G', 'R', 'A', 'F', 'O', 'S', 'N', 'D', 'I', 'E', 'C'])
        self.g_z8.adicionaAresta('G-R')
        self.g_z8.adicionaAresta('A-R')
        self.g_z8.adicionaAresta('A-F')
        self.g_z8.adicionaAresta('O-F')
        self.g_z8.adicionaAresta('O-S')
        self.g_z8.adicionaAresta('N-S')
        self.g_z8.adicionaAresta('N-D')
        self.g_z8.adicionaAresta('I-D')
        self.g_z8.adicionaAresta('I-E')
        self.g_z8.adicionaAresta('E-C')
        self.g_z8.adicionaAresta('G-C')

        self.g_z9 = Grafo(['G', 'R', 'A', 'F', 'O', 'S', 'N', 'D', 'I', 'E', 'C'])
        self.g_z9.adicionaAresta('G-R')
        self.g_z9.adicionaAresta('A-R')
        self.g_z9.adicionaAresta('A-F')
        self.g_z9.adicionaAresta('O-F')
        self.g_z9.adicionaAresta('O-S')
        self.g_z9.adicionaAresta('N-S')
        self.g_z9.adicionaAresta('N-D')
        self.g_z9.adicionaAresta('I-D')
        self.g_z9.adicionaAresta('I-E')

        self.g_z10 = Grafo(['M', 'O', 'S', 'C', 'A'])
        self.g_z10.adicionaAresta('M-O')
        self.g_z10.adicionaAresta('M-A')
        self.g_z10.adicionaAresta('S-C')
        self.g_z10.adicionaAresta('A-O')
        self.g_z10.adicionaAresta('C-C')

        self.g_z11 = Grafo(['D', 'E', 'S', 'L', 'U', 'M', 'B', 'R', 'A', 'T', 'I', 'V', 'O'])
        self.g_z11.adicionaAresta('D-E')
        self.g_z11.adicionaAresta('V-O')
        self.g_z11.adicionaAresta('S-L')
        self.g_z11.adicionaAresta('T-I')
        self.g_z11.adicionaAresta('M-U')
        self.g_z11.adicionaAresta('A-R')
        self.g_z11.adicionaAresta('B-R')
        self.g_z11.adicionaAresta('M-O')
        self.g_z11.adicionaAresta('E-S')
        self.g_z11.adicionaAresta('L-U')
        self.g_z11.adicionaAresta('I-V')
        self.g_z11.adicionaAresta('T-A')




    def test_CicloHamiltoniano(self):
        self.assertFalse(self.g_p.Ciclo_Hamiltoniano())
        self.assertFalse(self.g_p_sem_paralelas.Ciclo_Hamiltoniano())
        self.assertEqual(set(self.g_c.Ciclo_Hamiltoniano()),set(['J', 'C', 'E', 'P'] ))
        self.assertFalse(self.g_c3.Ciclo_Hamiltoniano())
        self.assertFalse(self.g_l1.Ciclo_Hamiltoniano())
        self.assertFalse(self.g_l2.Ciclo_Hamiltoniano())
        self.assertFalse(self.g_l3.Ciclo_Hamiltoniano())
        self.assertEqual(set(self.g_l4.Ciclo_Hamiltoniano()),set( ['D']))
        self.assertEqual(set(self.g_l5.Ciclo_Hamiltoniano()),set( ['C', 'D']))
        self.assertFalse(self.g_l6.Ciclo_Hamiltoniano())
        self.assertEqual(set(self.g_l7.Ciclo_Hamiltoniano()),set( ['D', 'A', 'H', 'G', 'B', 'E', 'C', 'F']))
        self.assertEqual(set(self.g_l8.Ciclo_Hamiltoniano()),set(['A', 'B', 'C'] ))

    def test_PrintCaminhoEuleriano(self):
        self.assertEqual(set(self.g_p.PrintCaminhoEuleriano()),set('Não possui caminho euleriano'))
        self.assertEqual(set(self.g_p_sem_paralelas.PrintCaminhoEuleriano()),set('Não possui caminho euleriano'))
        self.assertEqual(set(self.g_c.PrintCaminhoEuleriano()),set('Não possui caminho euleriano'))
        self.assertEqual(set(self.g_c3.PrintCaminhoEuleriano()),set('Não possui caminho euleriano'))
        self.assertEqual(set(self.g_l1.PrintCaminhoEuleriano()),set('Não possui caminho euleriano'))
        self.assertEqual(set(self.g_l2.PrintCaminhoEuleriano()),set('Não possui caminho euleriano'))
        self.assertEqual(set(self.g_l3.PrintCaminhoEuleriano()),set('Não possui caminho euleriano'))
        self.assertEqual(set(self.g_l4.PrintCaminhoEuleriano()),set('Não possui caminho euleriano'))
        self.assertEqual(set(self.g_l5.PrintCaminhoEuleriano()),set('Não possui caminho euleriano'))
        self.assertEqual(set(self.g_l6.PrintCaminhoEuleriano()),set(['D-C', 'C-A', 'A-D', 'D-F', 'F-C', 'C-E', 'E-H', 'H-G', 'G-D', 'G-E', 'E-B', 'B-G']))
        self.assertEqual(set(self.g_l7.PrintCaminhoEuleriano()),set(['A-D', 'D-C', 'C-A', 'A-H', 'H-E', 'E-C', 'C-F', 'F-D', 'D-G', 'G-E', 'E-B', 'B-G', 'G-H']))
        self.assertEqual(set(self.g_l8.PrintCaminhoEuleriano()),set(['A-B', 'B-C', 'C-A']))
        self.assertEqual(set(self.g_z.PrintCaminhoEuleriano()),set('Não possui caminho euleriano'))
        self.assertEqual(set(self.g_z1.PrintCaminhoEuleriano()),set('Não possui caminho euleriano'))
        self.assertEqual(set(self.g_z2.PrintCaminhoEuleriano()),set('Não possui caminho euleriano'))
        self.assertEqual(set(self.g_z3.PrintCaminhoEuleriano()),set('Não possui caminho euleriano'))
        self.assertEqual(set(self.g_z4.PrintCaminhoEuleriano()),set('Não possui caminho euleriano'))
        self.assertEqual(set(self.g_z5.PrintCaminhoEuleriano()),set('Não possui caminho euleriano'))
        self.assertEqual(set(self.g_z6.PrintCaminhoEuleriano()),set(['G-R', 'R-A', 'A-F', 'F-O', 'O-S']))
        self.assertEqual(set(self.g_z7.PrintCaminhoEuleriano()),set('Não possui caminho euleriano'))
        self.assertEqual(set(self.g_z8.PrintCaminhoEuleriano()),set(['G-R', 'R-A', 'A-F', 'F-O', 'O-S', 'S-N', 'N-D', 'D-I', 'I-E', 'E-C', 'C-G']))
        self.assertEqual(set(self.g_z9.PrintCaminhoEuleriano()),set('Não possui caminho euleriano'))
        self.assertEqual(set(self.g_z10.PrintCaminhoEuleriano()),set('Não possui caminho euleriano'))
        self.assertEqual(set(self.g_z11.PrintCaminhoEuleriano()),set(['D-E', 'E-S', 'S-L', 'L-U', 'U-M', 'M-O', 'O-V', 'V-I', 'I-T', 'T-A', 'A-R', 'R-B']))
